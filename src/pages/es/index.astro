---
import Layout from "../../layouts/Layout.astro";
import {Content as Doc} from "../../data/doc-es.md"
import  MarkdownPostLayout from "../../layouts/MarkdownPostLayout.astro";
import Navbar from "../../components/Navbar.astro";
import { getLangFromUrl } from "../../i18n/utils";
const lang = getLangFromUrl(Astro.url)
import Logo from "../../components/Logo.astro"
---

<Layout title="Libreria Ligera de Alertas || Bell.JS" description="Bell.js es una libreria para crear alertas adaptables de manera rapida y eficaz, ,mediante Vanilla Javascript. Solo debes crear y lanzar.">
  <Navbar/>
  <div class="mx-auto md:w-[60rem] w-full">
    <header class="flex md:flex-between flex-center relative">
    <main class="md:w-3/6 w-full md:text-left text-center md:h-screen h-[40rem] flex flex-col justify-center md:items-start items-center" id="inicio">
        <span class="py-1 md:px-3 px-2 text-red-600/80 bg-red-200/50 hover:bg-red-200/60 rounded-full flex items-center gap-2 sm:text-base text-sm w-fit font-bold transition-colors cursor-pointer">
      Beta V-1.1.1
    </span>
        <h1 class="text-6xl font-extrabold my-4">
          <span class="font-extrabold bg-gradient-to-r from-red-500/80 to-red-400/90 text-transparent bg-clip-text">
            Libreria Ligera
          </span>
          <span class="block">de Alertas</span>
        </h1>
        <p class="md:text-lg text-base text-gray-900/90 font-medium mb-5 md:px-0 px-10">
          Libreria para la generacion de alertas rapidas, ligeras y que se adapten al dise√±o de tu web o app.
        </p>
        <div class="flex gap-2 flex-start">
          <a href="/es/playground" class="py-1 px-3 rounded-full border-2 border-red-500/80 shadow-sm text-red-500 w-fit">Probar</a>
        <button id="launch-bell" class="py-1 px-3 rounded-full bg-red-500/80 shadow-sm text-white w-fit">Lanzar</button>
        </div>
      </main>
      <Logo class="size-96 absolute right-12 fill-black/5 fill-black/5 top-1/2 -translate-y-1/2"/>
    </header>
      <section class="w-full md:h-[44rem] h-[50rem] grid grid-cols-2 md:mt-6 mt-1 mb-20">
        <div class="bg-stone-300/40 col-span-3 rounded-xl flex items-center flex-col justify-start p-8 m-3">
          <h2 class="text-3xl font-bold text-red-400 mb-3">Personalizables</h2>
          <p class="font-medium md:text-lg text-base text-stone-700 text-center w-3/4">
            Muchas opciones para tu <span class="bg-red-400 text-white px-1 rounded">alerta</span>, desde el color y dise√±o hasta el modo como se muestra en pantalla.
          </p>
        </div>
        <div class="bg-gradient-to-br md:col-span-1 col-span-3 from-red-600/70 to-red-500/80 rounded-xl flex items-center flex-col justify-start p-8 m-3 overflow-hidden relative">
          <h2 class="md:text-3xl text-xl font-bold text-white/90 md:mb-3">Crea y lanza</h2>
          <p class="font-medium md:text-base text-xs text-white/70 text-center w-3/4">
            Solo necesitas crear una <span class="bg-white/85 text-red-400 px-1 rounded">instancia</span> de Bell y lanzarla.
          </p>
          <img src="img.png" alt="Imagen de datos de bell" class="absolute top-1/2 left-1/2 -translate-x-1/2 w-60" loading="lazy"/>
        </div>
        <div class="bg-stone-300/40 rounded-xl flex items-center flex-col md:col-span-1 col-span-3 justify-start p-8 m-3">
          <h2 class="text-3xl font-bold text-black mb-3">Estable...</h2>
          <p class="font-medium text-base text-stone-700 text-center w-3/4">
            El <span class="bg-black/80 text-white/90 px-1 rounded">paquete</span> de NPM ya esta aqui.
          </p>
        </div>
      </section>
    <article class="markdown p-4">
      <Doc/>
      </article>
  </div>
  <p class="mx-auto text-gray-800 my-4">Hecho con ‚ù§‚Äçüî• por JotaDev</p>
</Layout>

<script>
  import Bell from "bell-alert";
  const type = ["info", "warning", "error", "check"];
  const title = ["Ya lista","Upps", "Cargando recursos", "Todo va bien", "Cargando usuarios"];
  const description = [
    "Estamos trabajando para ti",
    "A ocurrido un error?",
    "Esta tardando mas de lo necesario",
    "Seras redireccionado",
    "Los usuarios seran cargados"
  ];

document.querySelector("#launch-bell").addEventListener("click",() => {
    let num = Math.round(Math.random() * 3)
    const options = [
      {
          title:title[num],
          description:description[num]
      },
      type[num],
      {
          animate: true,
          isColored:Boolean(Math.round(Math.random())),
          transitionDuration: 300,
          position: "bottom-right",
          typeAnimation: "fade-in",
          timeScreen: 10000,
          expand: true,
      }
  ]
  const bell = new Bell(...options)
  bell.launch()
})
import copyToClipBoard from "../../lib/copyToClipboard";
  const $icon = `<svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg"><path d="M6.9998 6V3C6.9998 2.44772 7.44752 2 7.9998 2H19.9998C20.5521 2 20.9998 2.44772 20.9998 3V17C20.9998 17.5523 20.5521 18 19.9998 18H16.9998V20.9991C16.9998 21.5519 16.5499 22 15.993 22H4.00666C3.45059 22 3 21.5554 3 20.9991L3.0026 7.00087C3.0027 6.44811 3.45264 6 4.00942 6H6.9998ZM5.00242 8L5.00019 20H14.9998V8H5.00242ZM8.9998 6H16.9998V16H18.9998V4H8.9998V6Z"/></svg>`
document.addEventListener("DOMContentLoaded", () => {
    const $allPre = document.querySelectorAll("pre");
    $allPre.forEach(($pre) => {
      const $copyComponent = document.createElement("button");
      $copyComponent.classList.add("copyToClipboard");
      $copyComponent.innerHTML = $icon;
      $pre.appendChild($copyComponent);
      $copyComponent.addEventListener("click", async () => {
        const res = await copyToClipBoard($pre.textContent);
        const [_, lang] = window.location.pathname.split("/");
        if (res === "success") {
          new Bell(
            {
              title: lang == "es" ? "Correcto" : "Success",
              description:
                lang == "es"
                  ? "Texto copiado correctamente"
                  : "Text copied correctly",
            },
            "check",
            {
              timeScreen: 5000,
              animate: true,
              isColored: true,
              expand: true,
            },
          ).launch();
        } else {
          new Bell(
            {
              title: "Error",
              description:
                lang == "es"
                  ? "El texto no se pudo copiar"
                  : "The text could not be copied",
            },
            "error",
            {
              timeScreen: 5000,
              animate: true,
              expand: true,
            },
          ).launch();
        }
      });
    });
  });
</script>

<style is:global>
  #launch-bell{
    position: relative;
    overflow: hidden;
  }
  #launch-bell::before{
    content: "";
    width: 60px;
    height: 20px;
    left:-70%;
    background: rgb(255 255 255 /.3);
    position: absolute;
    rotate:50deg;
    transition:.25s ease-in-out left;
  }
  #launch-bell:hover::before{
    left:90%;
  }
  svg{
    animation: svg auto linear forwards;
    animation-timeline: scroll(nearest block);
  }
  @keyframes svg {
        0% {
            fill:rgb(0 0 0 /.05);
        }
        20% {
            @apply fill-red-400
        }
        100% {
            @apply fill-red-400
        }
    }
    .copyToClipboard {
    @apply size-8 bg-white/20 absolute rounded top-3 right-3 hover:bg-white/30;
  }
  .copyToClipboard svg {
    @apply size-6 m-auto;
  }
  .markdown p > code, .markdown strong > code, .markdown table code {
    @apply font-normal  font-code not-italic px-1 bg-red-300/40 text-red-700/70 rounded;
  }
  .markdown p > a {
    text-decoration: underline !important;
    @apply text-red-500 ;
  }
  .markdown h1, .markdown h2 {
    @apply font-extrabold text-4xl text-gray-800 w-[90%] mt-10;
  }
  .markdown p {
    @apply text-gray-800/90 md:leading-8 leading-7 my-3;
  }
  .markdown blockquote {
    @apply relative flex my-2 before:content-[''] flex before:w-[5px] before:h-auto before:bg-red-500 before:rounded-xl before:block w-full h-full;
  }
  .markdown blockquote > p {
    @apply my-0 bg-red-200 ml-2 p-2 flex-1 rounded;
  }
  .markdown img {
    @apply w-full object-cover h-auto mb-2 rounded-md max-h-96;
  }
  .markdown pre {
    @apply relative my-7 text-base shadow-xl shadow-black/10 rounded-md p-3;
  }
  .markdown ol > li {
    @apply text-2xl mt-8 pt-1 font-extrabold text-red-500;
  }
  .markdown a div > p{
    text-overflow: ellipsis;
    overflow: hidden;
    @apply m-0 p-0 h-8;
  }
  .markdown a div > p:first-child{
    @apply dark:text-white/60 text-black/60
  }
  .markdown table{
    @apply w-full md:text-base text-sm;
  }
  .markdown table, .markdown tr, .markdown td{
    @apply border-2 border-red-300 text-gray-900/90;
  }
  .markdown td,.markdown th{
    @apply md:py-2 md:px-3 px-1 text-left;
  }
  body{
    background: url(sa0000.png) repeat , rgb(255, 238, 238);
    background-size: 300px;
    background-blend-mode: soft-light;
}
.header-a{
    animation:header-h auto linear forwards;
  animation-timeline: scroll(nearest block);
}
</style>
